%{
    #include "Nodes.cpp"
	#include <iostream>
	#include "hw3_output.hpp"
	#include "tables.cpp"
	#include "bp.hpp"
	#include "utils.cpp"
	using namespace output;
	using namespace std;



	extern int yylineno;
	extern int yylex();
	extern char* yytext;
	void yyerror(const char*);
	bool compareTypes(Node* token, string type);
	bool isNumber(Node* token);
	SymbolTables symbols_tables;
	string ret_type; //curr function ret type

	CodeBuffer& buff = CodeBuffer::instance();
	Info& info = Info::instance();
	void checkdiv(string reg);
	void init();
	void truncation(Node* node, string reg);
    string vars_ptr; // pointer to the current register holds the local variables to current function.

%}

%nonassoc VOID
%nonassoc INT
%nonassoc BYTE
%nonassoc B
%nonassoc BOOL
%nonassoc TRUE
%nonassoc FALSE
%nonassoc RETURN
%nonassoc WHILE
%nonassoc BREAK
%nonassoc CONTINUE
%nonassoc SWITCH
%nonassoc CASE
%nonassoc DEFAULT
%nonassoc COLON
%nonassoc SC
%nonassoc COMMA
%nonassoc ID
%nonassoc NUM
%nonassoc STRING
%right ASSIGN
%left OR
%left AND
%left EQUALITY_RELOP
%nonassoc RELATION_RELOP
%left PLUS_MINUS
%left MULT_DIV
%right NOT
%left LBRACE RBRACE
%left t IF
%right LPAREN RPAREN
%right ELSE


%%
Program : {init();} Funcs {};
Funcs : {}
	  | FuncDecl Funcs {};

FuncDecl : FuncDecl1 FuncDec2 {};

FuncDecl1 : RetType ID LPAREN Formals RPAREN LBRACE {
                                                      string func_name = ((Id*)$2)->name;
                                                      ret_type  =((Type*)$1)->type;
                                                      if(symbols_tables.findSymbol(func_name)){
                                                            errorDef(yylineno, func_name); exit(0);
                                                      }

                                                      string define="define "+ret_type+" @"+func_name+"(";
                                                      if($4 == nullptr){
                                                          symbols_tables.insertFuncEntry(func_name, ((Type*)$1)->type, vector<string>());
                                                       }
                                                      else{
                                                          vector<string> args_t = ((Arguments*)$4)->types;
                                                          vector<string> args_n = ((Arguments*)$4)->names;
                                                          symbols_tables.insertFuncEntry(func_name, ((Type*)$1)->type, args_t);
                                                          for(unsigned int i=0; i<args_t.size();i++){
                                                            string var_name = args_n[i];
                                                            if(symbols_tables.findSymbol(var_name)){
                                                                      errorDef(yylineno, var_name); exit(0);}
                                                            symbols_tables.insertFuncArgEntry(args_n[i], args_t[i]);
                                                            define+="i32,";
                                                          }
                                                          define.pop();
                                                      }
                                                      define+="){";
                                                      buff.emit(define);
                                                      string alloc = buff.genRegister();
                                                      vars_ptr = alloc;
                                                      buff.emit(alloc +"=alloca[50 x i32]");
                                                      for(unsigned int i=0; i<args_t.size();i++){//TODO:ASK SHIMON
                                                        string arg_ptr = buff.genRegister();
                                                        buff.emit(arg_ptr+"= alloca i32");
                                                        buff.emit("store i32 %"+i+" , i32* "+arg_ptr);
                                                      }
                                                    };

FuncDec2 :  Statements RBRACE {
        symbols_tables.closeScope(regular_scope);

         int loc = buff.emit("br label @");
		 string label = buff.genLabel();
		 vector<pair<int,BranchLabelIndex>> bp_list = buff.makelist({loc, FIRST});
		 bp_list = merge(bp_list, ((Statement)*$1)->nextList);
		 buf.bpatch(bp_list, label);
         string ret = ret_type == "VOID" ? "ret void" : "ret i32 0";
        buff.emit(ret);
        buff.emit("}");

 };

RetType : Type {$$ = $1;}
		| VOID {$$ = $1;};

Formals : {$$=nullptr;}
		| FormalsList {$$= $1;};

FormalsList : FormalDecl { $$ = $1;}
			| FormalDecl COMMA FormalsList {$$ = ((Arguments*)$1)->merge($3);};

FormalDecl : Type ID {$$ = new Arguments($1, $2);};

Statements : Statement {$$= $1}
		   | Statements M Statement {
		    buff.bpatch(((Statement*)$1)->next_list, ((Marker*)$2)->quad));
		    $$= $3;
		   };

Statement : LBRACE openScopeMark Statements RBRACE {
            symbols_tables.closeScope(regular_scope);
          }


		  | Type ID SC {
		  string type = ((Type*)$1)->type;
		  string name = ((Id*)$2)->name;
		  if(symbols_tables.findSymbol(name)){
		    errorDef(yylineno, name); exit(0);
			}
		  symbols_tables.insertEntry(name, type);
		  $$ = new Statement();
		  int offset = symbols_tables.currentOffset();
		  string var = buff.genRegister();
		  buff.emit(var + " =  getelementptr [50 x i32], [50 x i32]* " + vars_ptr + ", i32 0, i32 " + to_string(offset));
          buff.emit("store i32 0, i32* "+var);

		  }

		  | Type ID ASSIGN Exp SC {
									string id1 = ((Id*)$2)->name;

									if(symbols_tables.findSymbol(id1)){
										  errorDef(yylineno, id1);
										  exit(0);
									}
									string type1 = ((Type*)$1)->type;
									string type2 = ((Type*)$4)->type;
									if(type1.compare(type2)!=0 && (!compareTypes($1, "INT") || !compareTypes($4, "BYTE"))){
										errorMismatch(yylineno);
										exit(0);
									}
									symbols_tables.insertEntry(id1, type1);
									$$= new Type(type1);
									delete $1;
									delete $2;
									delete $4;
								}

		  | ID ASSIGN Exp SC { string id1 = ((Id*)$1)->name;
		                        Entry entry1;
                                if(!symbols_tables.findSymbol(id1, &entry1) || entry1.is_func){
                                      errorUndef(yylineno, id1);
                                      exit(0);
                                }
                                string type2 = ((Type*)$3)->type;
								string type1 = ((Type*)$1)->type;
                                if(entry1.type.compare(type2)!=0 &&(entry1.type!= "INT" || !compareTypes($3, "BYTE"))){
									errorMismatch(yylineno);
                                    exit(0);
                                }
		  }
		  | Call SC {}

		  | RETURN SC {
		                    if(ret_type.compare("VOID")!=0)
                            {
		                        errorMismatch(yylineno); exit(0);
		                    }
		                    buff.emit("ret void");
		                    $$ = new Statement();
		                }

		  | RETURN Exp SC { if(ret_type.compare("VOID")==0){
                                errorMismatch(yylineno); exit(0);
                            }
							string type = ((Type*)$2)->type;
		                    if(ret_type.compare(type)!=0 && (ret_type != "INT" || type != "BYTE")){
		                        errorMismatch(yylineno);
		                        exit(0);
		                    }
		                    string res =$2->reg;
		                    if(ret_type == "BOOL"){
                                res = phiOp($2);
		                    }

		                     emit("ret i32 " + res);
		                     $$ = new Statement();
		                };


		  | IF LPAREN ExpBool RPAREN openScopeMark  M Statement
		  {
              symbols_tables.closeScope(regular_scope);
              Type* exp = (Type*)$3;

              buff.bpatch(exp->true_list, ((Marker*)$6)->quad);
              $$ = new Statement();
              $$->next_list = buff.merge(exp->false_list, ((Statement*)$7)->next_list);
		  }



		  | IF LPAREN ExpBool RPAREN openScopeMark M Statement ELSE closeScopeMark openScopeMark N M Statement{
		        symbols_tables.closeScope(regular_scope);
		        Type* exp = (Type*)$3;
		        Statement* true_s = (State,emt*)$7;
		        Statement* false_s = (State,emt*)$13;
		        buff.bpatch(exp->true_list, ((Marker*)$6)->quad);
		        buff.bpatch(exp->false_list, ((Marker*)$12)->quad);

		         $$ = new Statement();
		         $$->next_list = bf.merge( $$->next_list,false_s->next_list );
		         $$->next_list = bf.merge( $$->next_list,true_s->next_list ); // todo: check this one with someone who understands
		         $$->next_list = bf.merge( $$->next_list,((NextMarker*)$11)->next_list);

		  }


		  | WHILE LPAREN ExpBool RPAREN openWhileScopeMark Statement {
            	symbols_tables.closeScope(while_scope);
		  }

		  | BREAK SC {
		        if(!symbols_tables.insideWhile() && !symbols_tables.insideSwitch())
		                    {errorUnexpectedBreak(yylineno);exit(0);}
		  }

		  | CONTINUE SC {
		        if(!symbols_tables.insideWhile())
                		     {errorUnexpectedContinue(yylineno);exit(0);}
		  }



		  | SwitchExp openSwitchScopeMark LBRACE CaseList RBRACE {
		        symbols_tables.closeScope(switch_scope);
		  };

Call : ID LPAREN ExpList RPAREN { string id = ((Id*)$1)->name;
                                   Entry entry;
                                    bool is_symbol = symbols_tables.findSymbol(id, &entry);

                                   if(!is_symbol || !entry.is_func){//todo: check if ID is not a func
                                    errorUndefFunc(yylineno, id);
                                    exit(0);
                                   }
                                  vector<string> exp_types = ((ExpList*)$3)->types;
                                  vector<string> func_types = entry.args_types;
                                   if(exp_types.size()!= func_types.size()){
                                    errorPrototypeMismatch(yylineno, id, func_types);
                                      exit(0);
                                   }

                                  for(unsigned int i =0 ; i<exp_types.size();i++){
                                    if(func_types[i] != exp_types[i] &&(func_types[i]!= "INT" || exp_types[i]!= "BYTE")){
                                        errorPrototypeMismatch(yylineno, id, func_types);
                                        exit(0);
                                    }
                                  }

								  $$=new Type(entry.type);
								  delete $1;
								  delete $3;


                        }

	 | ID LPAREN RPAREN {   string id = ((Id*)$1)->name;
                            Entry entry;
                             bool is_symbol = symbols_tables.findSymbol(id, &entry);
                            if(!is_symbol || !entry.is_func){
                             errorUndefFunc(yylineno, id);
                             exit(0);
                            }
                            if(!entry.args_types.empty()){
                                errorPrototypeMismatch(yylineno, id, entry.args_types); //todo: need to check if it the correct error.
                                exit(0);
							}
							  $$=new Type(entry.type);
							  delete $1;
                        };

ExpList : Exp {$$ = new ExpList($1);delete $1;}
		| Exp COMMA ExpList {	ExpList* list1 =new ExpList($1);
								$$ = list1->merge($3);
								delete $1; delete $3;
								};

Type : INT {$$ = $1;}
	 | BYTE {$$ = $1;}
	 | BOOL {$$ = $1;};




Exp :  Exp MULT_DIV Exp {

	    if(!isNumber($1) || !isNumber($3))
    	        {errorMismatch(yylineno);exit(0);}
    	if(compareTypes($1,"INT")|| compareTypes($3,"INT"))
    	    {$$ = new Type("INT");}
    	else{$$ = new Type("BYTE");}


        string op = ((BinOp*)$2)->op == "*"? "mul" : "div";
        string reg = buff.genRegister();
        bool is_byte = compareTypes($$, "BYTE");

        if(op == "div"){
            checkdiv($3->reg);
            op =  is_byte ? "u" + op : "s" + op;
        }
        buff.emit(reg + " = " + op + " i32 "+ $1->reg +", " +$3->reg);
        $$->reg = reg;
        if(is_byte){
            truncation($$, reg);
        }
    	delete $1;
    	delete $3;

    }

	| Exp PLUS_MINUS Exp {
	        if(!isNumber($1) || !isNumber($3))
        	        {errorMismatch(yylineno);exit(0);}
        	if(compareTypes($1,"INT")|| compareTypes($3,"INT"))
        	    {$$ = new Type("INT");}
        	else{$$ = new Type("BYTE");
        	}

            string op = ((BinOp*)$2)->op == "+" ? "add" : "sub";
        	string reg = buff.genRegister();
        	$$->reg = reg;
        	buff.emit(reg + " = " + op + " i32 "+ $1->reg +", " +$3->reg);
        	if(compareTypes($$,"BYTE")){
        	    truncation($$, reg);
        	}
	}


	| ID {
	    string name = ((Id*)$1)->name;
	    Entry entry;
		bool is_symbol =symbols_tables.findSymbol(name, &entry);
	    if(!is_symbol || (entry.is_func))
            {errorUndef(yylineno, name); exit(0);}
		$$ = new Type(entry.type);
		//string reg = buff.genRegister();
        //$$->reg = reg;
        //buff.emit(reg+ "= load i32, i32* "+ entry.loc);
	    if(compareTypes($1,"BOOL")){
	        string cond = buff.genRegister();
	        buff.emit(cond + "= icmp eq i32 1,"+ reg);
            int loc = buff.emit("br i1 "+ cond+ ", label @, label @");
            $$->true_list = buff.makelist({loc,FIRST});
            $$->false_list = buff.makelist({loc,SECOND});
	    }
    }

	| NUM { $$ = new Type("INT");
	        string reg = buff.genRegister();
	        int val = ((Num*)$1)->value;
	        buff.emit(reg +" = add i32 0, " +to_string(val));
			$$->reg = reg;

	}

	| NUM B {
		int val =((Num*)$1)->value;
		string str = to_string(val);
	    if( val> 255)
	        {errorByteTooLarge(yylineno, str );exit(0);}

	    $$ =$2;
	    string reg =  buff.genRegister();
        $$->reg = reg;
        buff.emit(reg +" = add i32 0, " +str );

	}





//////////////////////
	| Call {$$=$1;}

	| STRING {
	        $$ =$1;
	}

	| TRUE {
	    $$ = $1;
	    string reg = buff.genRegister();
        int loc = buff.emit("br label @");
        $$->true_list = buff.makelist({loc,FIRST});
	}

	| FALSE {
	    $$ = $1 ;
	    string reg = buff.genRegister();
        int loc = buff.emit("br label @");
        $$->false_list = buff.makelist({loc,FIRST});
	    }

	| NOT Exp {
	    if(!compareTypes($2,"BOOL"))
	    {errorMismatch(yylineno);exit(0);}
	    $$ = $2;
	    $$->true_list = $2->false_list;
	    $$->false_list = $2->true_list;

	}

	| Exp AND M Exp {
	    if(!compareTypes($1,"BOOL") || !compareTypes($3,"BOOL"))
	    {errorMismatch(yylineno);exit(0);}
        buff.bpatch($1->true_list,((Marker*)$3)->quad);
        $$ = $4;
        $$->false_list = buff.merge($1->false_list, $4->false_list);}

	| Exp OR M Exp {
        if(!compareTypes($1,"BOOL") || !compareTypes($3,"BOOL"))
        {errorMismatch(yylineno);exit(0);}
        buff.bpatch($1->false_list,((Marker*)$3)->quad);
        $$ = $4;
        $$->true_list = buff.merge($1->true_list, $4->true_list);
    }

	| Exp EQUALITY_RELOP Exp {
	    if(!isNumber($1) || !isNumber($3))
	        {errorMismatch(yylineno);exit(0);}
	    $$ = new Type("BOOL");
	    string cond = buff.genRegister();
	    string op = $2->relop_op;
	    if(op == "=")
	        buff.emit(cond + "= icmp eq i32 " + $1->reg + ","+ $3->reg);
	    else
	        buff.emit(cond + "= icmp ne i32 " + $1->reg + ","+ $3->reg);
	    int loc = buff.emit("br i1 "+ cond+ ", label @, label @");
	    $$->true_list = buff.makelist({loc,FIRST});
        $$->false_list = buff.makelist({loc,SECOND});
	}

	| Exp RELATION_RELOP Exp {
	    if(!isNumber($1) || !isNumber($3))
    	        {errorMismatch(yylineno);exit(0);}
    	$$ = new Type("BOOL");
    	string cond = buff.genRegister();
        string op = $2->relop_op;
        switch(op){
            case("<="):
                    buff.emit(cond + "= icmp sle i32 " + $1->reg + ","+ $3->reg);
                    break;
            case(">="):
                    buff.emit(cond + "= icmp sge i32 " + $1->reg + ","+ $3->reg);
                    break;
            case("<"):
                    buff.emit(cond + "= icmp slt i32 " + $1->reg + ","+ $3->reg);
                    break;
            case(">"):
                    buff.emit(cond + "= icmp sgt i32 " + $1->reg + ","+ $3->reg);
                    break;
                   }
         int loc = buff.emit("br i1 "+ cond+ ", label @, label @");
         $$->true_list = buff.makelist({loc,FIRST});
         $$->false_list = buff.makelist({loc,SECOND});
         //$$->reg =//TODO: CHECKKKKKKKKKKKKKKKKK
    };



CaseList : CaseDecl CaseList {}
		 | CaseDecl {}
		 | DEFAULT COLON Statements {};

CaseDecl : CASE NUM COLON Statements {};


//additions

M : {$$ = new Marker(buff.genLabel();};
N : {
     int loc = emit("br label @ ");
     $$ = new NextMarker(loc);
};

SwitchExp : SWITCH LPAREN Exp RPAREN {string type = ((Type*)$3)->type;
										if(type != "INT" && type != "BYTE")
										{errorMismatch(yylineno); exit(0);}};

openScopeMark : {symbols_tables.openScope(regular_scope);};

closeScopeMark : {symbols_tables.closeScope(regular_scope);};

openWhileScopeMark : {symbols_tables.openScope(while_scope);};

openSwitchScopeMark : {symbols_tables.openScope(switch_scope);};

ExpBool : Exp{
    if(!compareTypes($1, "BOOL")){
    errorMismatch(yylineno);
    exit(0);
    }
    $$=$1;
};
%%


void init(){

     //lib funcs
     buff.emit("declare i32 @printf(i8*, ...)");
     buff.emit("declare void @exit(i32)");

    //print
    buff.emitGlobal("@.str_specifier = constant [4 x i8] c\"%s\\0A\\00\"");
    buff.emit("define void @print(i8*) {");
    buff.emit("   call i32 (i8*, ...) @printf(i8* getelementptr ([4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0), i8* %0)");
    buff.emit("   ret void");
    buff.emit("}");


    //printi
    buff.emitGlobal("@.int_specifier = constant [4 x i8] c\"%d\\0A\\00\"");
    buff.emit("define void @printi(i32) {");
    buff.emit("   call i32 (i8*, ...) @printf(i8* getelementptr ([4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0), i32 %0)");
    buff.emit("   ret void");
    buff.emit("}");

    //errors
    buff.emitGlobal("@.div_err = constant [23 x i8] c\"Error division by zero\\00\"");



}
string phiOp(Type* exp){

    string lbl_f = genLabel();
    int loc_f = emit("br label @ ");
    string lbl_t = genLabel();
    int loc_t = emit("br label @ ");
    buff.bpatch(exp->true_list, lbl_t);
    buff.bpatch(exp->false_list, lbl_f);
    string lbl_phi = genLabel();
    buff.bpatch(makeList({loc_t,FIRST}), lbl_phi);
    buff.bpatch(makeList({loc_f,FIRST}), lbl_phi);
    string result = buff.genRegister();
    emit(result + " = phi i32 [0, %"+lbl_f+"], [1, %"+lbl_t+"]");
    return result;
}

void truncation(Node* node, string reg){
    string result =  buff.genRegister();
    buff.emit(result + " = and i32 255, "+reg);
    node->reg = result;
}

void checkdiv(string reg){

    string cond =  buff.genRegister();
    buff.emit(cond + "= icmp eq i32 0, "+ reg);
    int loc = buff.emit("br i1 "+ cond+ ", label @, label @");

    string lbl_t =  buff.genLabel();
    buff.emit("call void @print(i8* getelementptr( [23 x i8], [23 x i8]* @.div_err, i32 0, i32 0))");
	buff.emit("call void @exit(i32 0)");
	int loc_t = buff.emit("\tbr label @");

    string lbl_f =  buff.genLabel();
	//int loc_t = buff.emit("\tbr label @");

    buff.bpatch(buff.makelist({loc, FIRST}),lbl_t );
    buff.bpatch(buff.makelist({loc, SECOND}),lbl_f );
	buff.bpatch(buff.makelist({loc_t, FIRST}),lbl_f );


}



bool compareTypes(Node* token, string type){
    string node_type = ((Type*)token)->type;
    return (node_type == type);
}

bool isNumber(Node* token){
    if(compareTypes(token,"INT") || compareTypes(token,"BYTE")) return true;
    return false;
}


void yyerror(const char*){
    errorSyn(yylineno);
    exit(0);
}

int main() {
	int res = yyparse();
	if(res == 0){
		if(symbols_tables.getSymbolType("main").compare("VOID")!=0 || !symbols_tables.getFuncArgs("main").empty())
					{errorMainMissing(); exit(0);}
		 symbols_tables.closeScope(regular_scope);
	}
	buff.printGlobalBuffer();
	buff.printCodeBuffer();
	return res;
}
